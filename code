// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract VotingSystem {
    struct Candidate {
        string name;
        uint256 voteCount;
        bool exists;
    }

    struct Voter {
        bool hasVoted;
        bool exists;
    }

    mapping(address => Candidate) public candidates;
    mapping(address => Voter) public voters;
    address private admin;

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only the admin can perform this action");
        _;
    }

    modifier hasNotVoted() {
        require(!voters[msg.sender].hasVoted, "You have already voted");
        _;
    }

    constructor() {
        admin = msg.sender;
    }

    function addCandidate(address candidateAddress, string memory name) public onlyAdmin {
        require(!candidates[candidateAddress].exists, "Candidate already exists");
        require(bytes(name).length > 0, "Candidate name cannot be empty");

        candidates[candidateAddress] = Candidate(name, 0, true);
    }

    function vote(address candidateAddress) public hasNotVoted {
        require(candidates[candidateAddress].exists, "Candidate does not exist");

        // Mark voter as having voted
        voters[msg.sender] = Voter(true, true);

        // Increment candidate vote count
        candidates[candidateAddress].voteCount++;

        // Ensure the vote count is not negative
        assert(candidates[candidateAddress].voteCount >= 0);

        // Additional revert check (for illustration)
        if (candidates[candidateAddress].voteCount < 0) {
            revert("Vote count should not be negative");
        }
    }

    function getCandidate(address candidateAddress) public view returns (string memory, uint256) {
        require(candidates[candidateAddress].exists, "Candidate does not exist");
        Candidate memory candidate = candidates[candidateAddress];
        return (candidate.name, candidate.voteCount);
    }
}
