// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SchoolGradingSystem {
    struct Student {
        string name;
        uint256 grade;
        bool exists;
    }

    mapping(address => Student) public students;
    address public teacher;
    
    modifier onlyTeacher() {
        require(msg.sender == teacher, "Only the teacher can perform this action");
        _;
    }

    constructor() {
        teacher = msg.sender;
    }

    function enrollStudent(address studentAddress, string memory name, uint256 initialGrade) public onlyTeacher {
        require(initialGrade >= 0 && initialGrade <= 100, "Initial grade must be between 0 and 100");
        require(!students[studentAddress].exists, "Student already enrolled");

        students[studentAddress] = Student(name, initialGrade, true);
    }

    function updateStudentGrade(address studentAddress, uint256 newGrade) public onlyTeacher {
        require(newGrade >= 0 && newGrade <= 100, "New grade must be between 0 and 100");
        require(students[studentAddress].exists, "Student not enrolled");

        students[studentAddress].grade = newGrade;
    }

    function increaseGrade(address studentAddress) public onlyTeacher {
        require(students[studentAddress].exists, "Student not enrolled");
        uint256 oldGrade = students[studentAddress].grade;
        students[studentAddress].grade += 5; // Increase grade by 5 points
        assert(students[studentAddress].grade >= oldGrade);
    }

    function decreaseGrade(address studentAddress) public onlyTeacher {
        require(students[studentAddress].exists, "Student not enrolled");
        uint256 oldGrade = students[studentAddress].grade;
        if (oldGrade >= 5) {
            students[studentAddress].grade -= 5; // Decrease grade by 5 points if possible
        }
        assert(students[studentAddress].grade <= oldGrade);
    }
}
