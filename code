// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SchoolGradingSystem {
    struct Student {
        string name;
        uint256 marks;
        bool exists;
    }

    mapping(address => Student) private students;
    address private teacher;

    modifier onlyTeacher() {
        require(msg.sender == teacher, "Only the teacher can perform this action");
        _;
    }

    constructor() {
        teacher = msg.sender;
    }

    function enrollStudent(address studentAddress, string memory name, uint256 initialmarks) public onlyTeacher {
        require(initialmarks <= 100, "Grade must be between 0 and 100");
        require(!students[studentAddress].exists, "Student already enrolled");

        students[studentAddress] = Student(name, initialmarks, true);
    }

    function updateStudentMarks(address studentAddress, uint256 newMarks) public onlyTeacher {
        require(newMarks <= 100, "Grade must be between 0 and 100");
        require(students[studentAddress].exists, "Student not enrolled");

        students[studentAddress].marks= newMarks;
    }

    function changeMarks(address studentAddress, int256 delta) public onlyTeacher {
        require(students[studentAddress].exists, "Student not enrolled");
        int256 newMarks = int256(students[studentAddress].marks) + delta;
        require(newMarks >= 0 && newMarks <= 100, "Grade must be between 0 and 100");

        students[studentAddress].marks = uint256(newMarks);
    }

    function getStudent(address studentAddress) public view returns (string memory, uint256) {
        require(students[studentAddress].exists, "Student not enrolled");
        Student memory student = students[studentAddress];
        return (student.name, student.marks);
    }
}
